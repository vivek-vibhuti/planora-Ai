'use client';

import { useSearchParams } from 'next/navigation';
import { useEffect, useState, useMemo } from 'react';
import Link from 'next/link';
import { ArrowLeft, Download, Share2 } from 'lucide-react';

type Plan = {
  id?: string | null;
  destination: string;
  days: number;
  budget: string;
  overview: string;
};

export default function TripPlanPage() {
  const searchParams = useSearchParams();
  const tripId = searchParams.get('id');
  const [tripPlan, setTripPlan] = useState<Plan | null>(null);
  const [loading, setLoading] = useState(true);

  // Try to hydrate from sessionStorage using tripId, fallback to placeholder
  useEffect(() => {
    setLoading(true);
    const timer = setTimeout(() => {
      let plan: Plan | null = null;

      try {
        const stored = sessionStorage.getItem('currentTripPlan');
        if (stored) {
          const parsed = JSON.parse(stored);
          plan = {
            id: tripId,
            destination: parsed?.tripOverview?.destination || 'Ranchi',
            days: Number((parsed?.tripOverview?.duration || '').replace(/[^\d]/g, '')) || 3,
            budget: parsed?.tripOverview?.totalBudget || 'â‚¹25000',
            overview:
              parsed?.tripOverview?.overview ||
              'Your personalized Jharkhand trip plan has been generated!',
          };
        }
      } catch {
        // ignore parse errors, fallback to placeholder
      }

      if (!plan) {
        plan = {
          id: tripId,
          destination: 'Ranchi',
          days: 3,
          budget: 'â‚¹25000',
          overview: 'Your personalized Jharkhand trip plan has been generated!',
        };
      }

      setTripPlan(plan);
      setLoading(false);
    }, 400);

    return () => clearTimeout(timer);
  }, [tripId]);

  const share = async () => {
    const url = typeof window !== 'undefined' ? window.location.href : '';
    const title = `${tripPlan?.destination} Trip Plan - PLANORA AI`;
    const text = `Check out my AI-generated trip plan for ${tripPlan?.destination}!`;
    if (navigator.share) {
      try {
        await navigator.share({ title, text, url });
      } catch {
        // user canceled
      }
    } else if (navigator.clipboard && url) {
      await navigator.clipboard.writeText(url);
    }
  };

  const download = () => {
    if (!tripPlan) return;
    const content = `
PLANORA AI - Trip Plan
===================

Destination: ${tripPlan.destination}
Duration: ${tripPlan.days} days
Budget: ${tripPlan.budget}

Overview:
${tripPlan.overview}

Generated by PLANORA AI - Jharkhand Trip Planner
`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripPlan.destination}-Trip-Plan.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const subtitle = useMemo(
    () => (tripPlan ? `${tripPlan.days} days â€¢ ${tripPlan.budget} â€¢ Generated by PLANORA AI` : ''),
    [tripPlan]
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your trip plan...</p>
        </div>
      </div>
    );
  }

  if (!tripPlan) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center px-4">
        <div className="text-center bg-white/80 backdrop-blur p-8 rounded-xl shadow border">
          <h1 className="text-2xl font-bold text-gray-900 mb-3">Trip Plan Not Found</h1>
          <p className="text-gray-600 mb-6">The trip plan being requested was not found.</p>
          <Link
            href="/"
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 inline-block"
          >
            Plan a New Trip
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
      <div className="max-w-6xl mx-auto px-4 py-6 sm:py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6 sm:mb-8">
          <Link
            href="/"
            className="flex items-center gap-2 text-gray-700 hover:text-green-700 transition-colors"
          >
            <ArrowLeft className="h-5 w-5" />
            Back to Home
          </Link>

          <div className="flex gap-2 sm:gap-3">
            <button
              onClick={share}
              className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg bg-white hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-green-500"
            >
              <Share2 className="h-4 w-4" />
              Share
            </button>
            <button
              onClick={download}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-green-500"
            >
              <Download className="h-4 w-4" />
              Download
            </button>
          </div>
        </div>

        {/* Trip Plan Content */}
        <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200">
          <div className="text-center mb-6 sm:mb-8">
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">
              ðŸŽ‰ Your {tripPlan.destination} Trip Plan
            </h1>
            <p className="text-gray-600">{subtitle}</p>
          </div>

          <div className="bg-green-50 border border-green-200 rounded-lg p-5 sm:p-6 mb-8">
            <h2 className="text-lg sm:text-xl font-semibold text-green-900 mb-2">Trip Overview</h2>
            <p className="text-green-800">{tripPlan.overview}</p>
          </div>

          <div className="grid md:grid-cols-2 gap-6 sm:gap-8">
            <div className="bg-blue-50 rounded-lg p-5 sm:p-6">
              <h3 className="text-lg font-semibold text-blue-900 mb-4">Itinerary Highlights</h3>
              <div className="space-y-3 text-gray-800">
                <div className="flex items-center gap-3">
                  <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-sm flex items-center justify-center">
                    1
                  </span>
                  <span>Arrival & Hundru Falls visit</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-sm flex items-center justify-center">
                    2
                  </span>
                  <span>Rock Garden & Tagore Hill exploration</span>
                </div>
                <div className="flex items-center gap-3">
                  <span className="w-6 h-6 bg-blue-600 text-white rounded-full text-sm flex items-center justify-center">
                    3
                  </span>
                  <span>Dassam Falls & departure</span>
                </div>
              </div>
            </div>

            <div className="bg-orange-50 rounded-lg p-5 sm:p-6">
              <h3 className="text-lg font-semibold text-orange-900 mb-4">Budget Breakdown</h3>
              <div className="space-y-2 text-gray-800">
                <Row k="Accommodation" v="â‚¹10,000" />
                <Row k="Food & Dining" v="â‚¹6,250" />
                <Row k="Transportation" v="â‚¹5,000" />
                <Row k="Activities" v="â‚¹2,500" />
                <div className="border-t pt-2 flex justify-between font-bold">
                  <span>Total:</span>
                  <span className="text-green-600">â‚¹25,000</span>
                </div>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="mt-8 text-center">
            <p className="text-gray-600 mb-4">Need to modify your plan or have questions?</p>
            <div className="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
              <Link
                href="/chat?context=trip-details"
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 text-center"
                onClick={() => {
                  try {
                    // hand off trip plan to chat
                    sessionStorage.setItem(
                      'currentTripPlan',
                      JSON.stringify({
                        tripOverview: {
                          destination: tripPlan.destination,
                          duration: `${tripPlan.days} days`,
                          totalBudget: tripPlan.budget,
                          overview: tripPlan.overview,
                        },
                      })
                    );
                  } catch {}
                }}
              >
                Chat with AI
              </Link>
              <Link
                href="/"
                className="border border-gray-300 px-6 py-3 rounded-lg hover:bg-gray-50 text-center bg-white"
              >
                Plan Another Trip
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function Row({ k, v }: { k: string; v: string }) {
  return (
    <div className="flex justify-between">
      <span>{k}:</span>
      <span className="font-medium">{v}</span>
    </div>
  );
}
